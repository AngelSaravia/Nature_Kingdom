name: Build and deploy Node.js app to Azure Web App - naturekingdomBE

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Debug project structure
        run: |
          echo "Root directory contents:"
          ls -la
          echo "Finding all package.json files:"
          find . -name "package.json" -type f
          echo "Finding all server directories:"
          find . -name "server" -type d

      # Determine if package.json is at the root level
      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "Found package.json at root level"
            npm ci
          else
            echo "No package.json at root level, checking possible locations..."
            # Try to find the right directory with package.json
            if [ -d "server" ] && [ -f "server/package.json" ]; then
              echo "Found package.json in server directory"
              cd server
              npm ci
            elif [ -d "api" ] && [ -f "api/package.json" ]; then
              echo "Found package.json in api directory"
              cd api
              npm ci
            elif [ -d "backend" ] && [ -f "backend/package.json" ]; then
              echo "Found package.json in backend directory"
              cd backend
              npm ci
            else
              echo "ERROR: Could not locate package.json in expected locations"
              exit 1
            fi
          fi

      # Create deployment package with the correct directory
      - name: Create deployment package
        run: |
          # Determine which directory contains the backend code
          if [ -f "package.json" ]; then
            echo "Creating ZIP from root directory"
            # Exclude frontend folders and node_modules
            zip -r deploy.zip . -x "node_modules/*" "client/*" ".git*"
          elif [ -d "server" ] && [ -f "server/package.json" ]; then
            echo "Creating ZIP from server directory"
            cd server
            zip -r ../deploy.zip .
          elif [ -d "api" ] && [ -f "api/package.json" ]; then
            echo "Creating ZIP from api directory"
            cd api
            zip -r ../deploy.zip .
          elif [ -d "backend" ] && [ -f "backend/package.json" ]; then
            echo "Creating ZIP from backend directory"
            cd backend
            zip -r ../deploy.zip .
          else
            # If we get here, package.json must exist elsewhere
            echo "Creating ZIP from entire project as fallback"
            zip -r deploy.zip . -x ".git*"
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Prepare deployment directory
        run: |
          mkdir -p deploy-app
          unzip deploy.zip -d deploy-app
          echo "Contents of deployment folder:"
          ls -la deploy-app

          # Check if package.json exists in the extracted directory
          if [ ! -f "deploy-app/package.json" ]; then
            echo "ERROR: package.json not found in deployment directory"
            echo "Looking for package.json in subdirectories:"
            find deploy-app -name "package.json" -type f
            exit 1
          fi

      # Install production dependencies
      - name: Install production dependencies
        run: |
          cd deploy-app
          npm install --omit=dev

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_1B4AE99ADEE44A9D9EF339FBACE118DF }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6D9B96F60759422C9AC522B18653A441 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_9845D10D63E3497A8FF956C1CEDB6E34 }}

      # Deploy the app
      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "naturekingdomBE"
          slot-name: "Production"
          package: deploy-app

      - name: "Post-deployment verification"
        run: |
          echo "Deployed successfully to ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          sleep 30 # Give the app time to start
          curl -sSf "${{ steps.deploy-to-webapp.outputs.webapp-url }}" || echo "Website might still be starting up"
